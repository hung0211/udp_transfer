import socket, json, os, select
from shared.config import SERVER_IP, SERVER_PORT, CHUNK_SIZE

def request_file_list(sock):
    req = { "type": "GET_LIST" }
    sock.sendto(json.dumps(req).encode(), (SERVER_IP, SERVER_PORT))
    rlist, _, _ = select.select([sock], [], [], 2)
    if rlist:
        data, _ = sock.recvfrom(4096)
        print("üìÑ Danh s√°ch file t·ª´ server:")
        print(data.decode())
    else:
        print("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server.")

def request_all_chunks(sock, filename):
    offset = 0
    part = 1
    chunk_files = []
    while True:
        req = {
            "type": "GET_CHUNK",
            "filename": filename,
            "offset": offset,
            "length": CHUNK_SIZE
        }
        sock.sendto(json.dumps(req).encode(), (SERVER_IP, SERVER_PORT))
        rlist, _, _ = select.select([sock], [], [], 3)
        if not rlist:
            print("‚ùå M·∫•t k·∫øt n·ªëi t·ªõi server ho·∫∑c timeout.")
            break

        data, _ = sock.recvfrom(4096)
        if data == b"__END__":
            print("‚úÖ Ho√†n t·∫•t t·∫£i file.")
            break

        part_file = f"{filename}.part{part}"
        with open(part_file, "wb") as f:
            f.write(data)
        print(f"‚úÖ Nh·∫≠n chunk {part}, ghi v√†o {part_file}")
        chunk_files.append(part_file)
        offset += len(data)
        part += 1

    # G·ªôp file
    with open(f"received_{filename}", "wb") as outfile:
        for pf in chunk_files:
            with open(pf, "rb") as f:
                outfile.write(f.read())
    print(f"üì¶ ƒê√£ gh√©p th√†nh c√¥ng file: received_{filename}")

def main():
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setblocking(False)

    print("1. Nh·∫≠n danh s√°ch file t·ª´ server")
    request_file_list(sock)

    print("\n2. T·∫£i file ƒë·∫ßy ƒë·ªß t·ª´ server")
    filename = input("Nh·∫≠p t√™n file c·∫ßn t·∫£i (ph·∫£i kh·ªõp file_list.txt): ").strip()
    request_all_chunks(sock, filename)

if __name__ == "__main__":
    main()
