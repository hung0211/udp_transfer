import os, socket, json, base64, hashlib, select
from shared.config import SERVER_IP, SERVER_PORT, CHUNK_SIZE

# T·∫°o socket UDP v√† g√°n (bind) v√†o ƒë·ªãa ch·ªâ IP v√† c·ªïng ch·ªâ ƒë·ªãnh
server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
server_socket.bind((SERVER_IP, SERVER_PORT))
print(f"[SERVER] Running on {SERVER_IP}:{SERVER_PORT}")

# ƒê·ªçc danh s√°ch c√°c file ƒë∆∞·ª£c ph√©p chia s·∫ª t·ª´ file_list.txt
with open("server/file_list.txt") as f:
    allowed_files = [line.strip() for line in f if line.strip()]

# G·ª≠i danh s√°ch c√°c file h·ª£p l·ªá cho client
def handle_get_list(addr):
    files = os.listdir("server")  # Li·ªát k√™ t·∫•t c·∫£ file trong th∆∞ m·ª•c server/
    valid_files = [f for f in files if f in allowed_files]  # L·ªçc ra file h·ª£p l·ªá
    response = "\n".join(valid_files)
    server_socket.sendto(response.encode(), addr)  # G·ª≠i danh s√°ch file

# G·ª≠i m·ªôt chunk d·ªØ li·ªáu t·ª´ file v·ªÅ cho client
def handle_get_chunk(addr, filename, offset, length):
    filepath = f"server/{filename}"
    
    # Ki·ªÉm tra file c√≥ n·∫±m trong danh s√°ch h·ª£p l·ªá v√† t·ªìn t·∫°i kh√¥ng
    if filename not in allowed_files or not os.path.exists(filepath):
        server_socket.sendto(b"__INVALID__", addr)
        return

    with open(filepath, "rb") as f:
        f.seek(offset)  # Di chuy·ªÉn ƒë·∫øn offset ch·ªâ ƒë·ªãnh trong file
        chunk = f.read(length)  # ƒê·ªçc ƒëo·∫°n d·ªØ li·ªáu c√≥ ƒë·ªô d√†i t∆∞∆°ng ·ª©ng

        # M√£ h√≥a d·ªØ li·ªáu chunk b·∫±ng base64 v√† t·∫°o checksum
        encoded = base64.b64encode(chunk).decode()
        checksum = hashlib.sha256(chunk).hexdigest()

        # T·∫°o packet ch·ª©a d·ªØ li·ªáu v√† checksum g·ª≠i cho client
        packet = {
            "data": encoded,
            "checksum": checksum
        }
        server_socket.sendto(json.dumps(packet).encode(), addr)

        # Ch·ªù nh·∫≠n ACK t·ª´ client (timeout 1 gi√¢y)
        rlist, _, _ = select.select([server_socket], [], [], 1.0)
        if rlist:
            ack_data, ack_addr = server_socket.recvfrom(4096)
            try:
                ack_msg = json.loads(ack_data.decode())
                # N·∫øu c·∫ßn x·ª≠ l√Ω logic ACK th√¨ x·ª≠ l√Ω ·ªü ƒë√¢y (ƒëang t·∫°m th·ªùi comment)
                # if (
                #     ack_msg.get("type") == "ACK" and
                #     ack_msg.get("filename") == filename and
                #     ack_msg.get("offset") == offset
                # ):
                #     print(f"[SERVER] ‚úÖ ACK received for {filename} offset {offset} from {ack_addr}")
                pass
            except Exception as e:
                print(f"[SERVER] ‚ö†Ô∏è Failed to parse ACK from {addr}: {e}")

# G·ª≠i k√≠ch th∆∞·ªõc file v·ªÅ cho client
def handle_get_size(addr, filename):
    filepath = f"server/{filename}"
    
    # Ki·ªÉm tra file c√≥ h·ª£p l·ªá v√† t·ªìn t·∫°i kh√¥ng
    if filename not in allowed_files or not os.path.exists(filepath):
        server_socket.sendto(b"0", addr)  # G·ª≠i 0 n·∫øu file kh√¥ng t·ªìn t·∫°i
        return

    size = os.path.getsize(filepath)
    print(f"[SERVER] ‚úÖ Sent size of file {filename}: {size} bytes")
    server_socket.sendto(str(size).encode(), addr)

# V√≤ng l·∫∑p ch√≠nh c·ªßa server
try:
    while True:
        # D√πng select ƒë·ªÉ ki·ªÉm tra socket c√≥ d·ªØ li·ªáu ƒë·∫øn kh√¥ng (timeout 1 gi√¢y)
        rlist, _, _ = select.select([server_socket], [], [], 1)
        if rlist:
            data, addr = server_socket.recvfrom(65536)
            try:
                # Parse d·ªØ li·ªáu y√™u c·∫ßu JSON t·ª´ client
                req = json.loads(data.decode())

                # G·ªçi h√†m x·ª≠ l√Ω t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i y√™u c·∫ßu
                if req["type"] == "GET_LIST":
                    handle_get_list(addr)
                elif req["type"] == "GET_CHUNK":
                    handle_get_chunk(addr, req["filename"], req["offset"], req["length"])
                elif req["type"] == "GET_SIZE":
                    handle_get_size(addr, req["filename"])
            except Exception as e:
                print(f"[SERVER] ‚ùå Error handling request from {addr}: {e}")

# B·∫Øt t·ªï h·ª£p ph√≠m Ctrl+C ƒë·ªÉ d·ª´ng server an to√†n
except KeyboardInterrupt:
    print("\n[SERVER] üõë Ctrl+C received. Shutting down server...")
    server_socket.close()
